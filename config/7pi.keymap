#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define ALP1 0
#define ALP1U 1
#define ALP2 2
#define ALP2U 3
#define NUM 4
#define NAV 5
#define SYM 6
#define FUN 7

&mt {
    tapping-term-ms = <201>;
    flavor = "tap-preferred";
 };

/ {
	macros {
        space_togNUM: space_togNUM {
            label = "ZM_space_tog0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SPACE &tog NUM>;
        };
		enter_togNUM: enter_togNUM {
            label = "ZM_enter_tog0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp ENTER &tog NUM>;
        };
    };

	combos {
        compatible = "zmk,combos";
		combo_num {
        	timeout-ms = <50>;
            key-positions = <10 13>;
        	bindings = <&tog NUM>;
		};
		combo_fun {
        	timeout-ms = <50>;
            key-positions = <4 5>;
        	bindings = <&tog FUN>;
		};
		combo_del {
        	timeout-ms = <50>;
            key-positions = <20 21>;
        	bindings = <&kp DEL>;
		};
		combo_esc {
			timeout-ms = <50>;
			key-positions = <18 19>;
			bindings = <&kp ESC>;
			layers = <0 1 2 3 5>;
		};
		combo_undo {
			timeout-ms = <50>;
			key-positions = <0 12>;
			bindings = <&kp LC(Z)>;
		};
		combo_cut {
			timeout-ms = <50>;
			key-positions = <1 12>;
			bindings = <&kp LC(X)>;
		};
		combo_copy {
			timeout-ms = <50>;
			key-positions = <2 12>;
			bindings = <&kp LC(C)>;
		};
		combo_paste {
			timeout-ms = <50>;
			key-positions = <3 12>;
			bindings = <&kp LC(V)>;
		};
		combo_redo {
			timeout-ms = <50>;
			key-positions = <4 12>;
			bindings = <&kp LC(Y)>;
		};
		combo_find {
			timeout-ms = <50>;
			key-positions = <7 15>;
			bindings = <&kp LC(F)>;
			layers = <0 1 2 3>;
		};
		combo_print {
			timeout-ms = <50>;
			key-positions = <6 15>;
			bindings = <&kp LC(P)>;
			layers = <0 1 2 3>;
		};
		combo_lock {
			timeout-ms = <50>;
			key-positions = <3 10>;
			bindings = <&kp LC(L)>;
			layers = <0 1 2 3>;
		};		
		combo_lp {
			timeout-ms = <50>;
			key-positions = <10 11>;
			bindings = <&kp LPAR>;
		};
		combo_rp {
			timeout-ms = <50>;
			key-positions = <12 13>;
			bindings = <&kp RPAR>;
		};
		combo_lbk {
			timeout-ms = <50>;
			key-positions = <0 1>;
			bindings = <&kp LBKT>;
		};
		combo_rbk {
			timeout-ms = <50>;
			key-positions = <2 3>;
			bindings = <&kp RBKT>;
		};
		combo_lbc {
			timeout-ms = <50>;
			key-positions = <6 7>;
			bindings = <&kp LBRC>;
		};
		combo_rbc {
			timeout-ms = <50>;
			key-positions = <8 9>;
			bindings = <&kp RBRC>;
		};
	};

    behaviors {
		u_mt: u_mt {
      		compatible = "zmk,behavior-hold-tap";
      		label = "u_mt";
      		#binding-cells = <2>;
      		tapping_term_ms = <201>;
      		flavor = "tap-preferred";
      		bindings = <&kp>, <&kp>;
    	};
    	u_lt: u_lt {
      		compatible = "zmk,behavior-hold-tap";
      		label = "u_lt";
      		#binding-cells = <2>;
      		tapping_term_ms = <201>;
      		flavor = "tap-preferred";
      		bindings = <&mo>, <&kp>;
    	};
		u_num: u_num {
      		compatible = "zmk,behavior-hold-tap";
      		label = "u_num";
      		#binding-cells = <2>;
      		tapping_term_ms = <201>;
      		flavor = "tap-preferred";
      		bindings = <&mo>, <&space_togNUM>;
    	};
		htog_tsl: u_num {
      		compatible = "zmk,behavior-hold-tap";
      		label = "u_num";
      		#binding-cells = <2>;
      		tapping_term_ms = <201>;
      		flavor = "tap-preferred";
      		bindings = <&tog>, <&sl>;
    	};
		td: tapdance {
            compatible = "zmk,behavior-hold-tap";
            label = "TAPDANCE";
            #binding-cells = <2>;
            tapping-term-ms = <190>;
            quick-tap-ms = <250>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
	};

    keymap {
    	compatible = "zmk,keymap";
        
       	ALP1 {
		bindings = <
		&kp Q            &u_mt RALT W     &kp C               &kp D             &kp TAB        &kp ENTER       &kp H            &kp U            &u_mt RALT Y     &kp SQT
        &u_mt LGUI A     &u_mt LALT R     &u_mt LCTRL S       &u_mt LSHFT T     							   &u_mt LSHFT N    &u_mt LCTRL E    &u_mt LALT I     &u_mt LGUI O
                                                              &u_lt NAV SPACE   &sl ALP1U      &htog_tsl NUM ALP2        &u_lt SYM BSPC
		>;
        };
		ALP1U {
		bindings = <
		&kp LS(Q)   &kp LS(W)       &kp LS(C)       &kp LS(D)           &kp DEL         &kp ENTER       &kp LS(H)   &kp LS(U)   &kp LS(Y)       &kp LS(SQT)
        &kp LS(A)   &kp LS(R)       &kp LS(S)       &kp LS(T)                                           &kp LS(N)   &kp LS(E)   &kp LS(I)       &kp LS(O)
                                                    &kp SPACE           &none           &sl ALP2U       &kp BSPC
		>;
		};
		ALP2 {
		bindings = <
		&kp BSLH    &kp Z       &kp X       &kp L        &kp DEL          &kp ENTER       &kp COMMA   &kp DOT     &kp FSLH    &kp SEMI
        &kp B       &kp P       &kp F       &kp G                                         &kp M       &kp V       &kp K       &kp J
                                            &kp SPACE    &sl ALP2U        &none           &kp BSPC
		>;
		};
       	ALP2U {
		bindings = <
		&kp LS(BSLH)    &kp LS(Z)       &kp LS(X)       &kp LS(L)        &kp DEL        &kp ENTER       &kp LS(COMMA) &kp LS(DOT) &kp LS(FSLH)    &kp LS(SEMI)
        &kp LS(B)       &kp LS(P)       &kp LS(F)       &kp LS(G)                                       &kp LS(M)   &kp LS(V)   &kp LS(K)       &kp LS(J)
                                                        &kp SPACE        &none          &none           &kp BSPC
		>;
		};
       	NUM {
		bindings = <
		&kp N5       &kp N6      &kp N7      &kp N8            &kp N9           &enter_togNUM   &kp COMMA   &kp DOT     &kp FSLH    &kp CARET    
        &kp N1       &kp N2      &kp N3      &kp N4                                             &kp EQUAL   &kp STAR    &kp MINUS   &kp PLUS
                                             &u_num NAV 0      &kp N0	        &kp DEL         &u_lt SYM BSPC
		>;
		};
		NAV {
		bindings = <
		&bootloader  &kp RALT     &none       &none        &kp ESC        &kp ENTER       &kp HOME    &kp PG_DN   &kp PG_UP   &kp END
        &kp LGUI     &kp LALT     &kp LCTRL   &kp LSHFT                                   &kp LEFT    &kp DOWN    &kp UP      &kp RIGHT
                                              &kp SPACE    &kp TAB        &kp DEL         &kp BSPC
		>;
		};
		SYM {
		bindings = <
		&kp PRCNT     &kp CARET    &kp AMPERSAND &kp ASTRK    &kp GRAVE        &kp ENTER       &kp COMMA   &kp DOT     &kp FSLH    &kp CARET  
        &kp EXCL      &kp AT       &kp HASH      &kp DLLR                                      &kp EQUAL   &kp STAR    &kp MINUS   &kp PLUS
                                                 &kp TILDE    &kp UNDERSCORE   &kp DEL         &kp BSPC
		>;
		};
       	FUN {
		bindings = <
		&kp F5              &u_mt RALT F6      &kp F7              &kp F8            &none              &none               &none        &none        &kp RALT     &none    
        &u_mt LGUI F1       &u_mt LALT F2      &u_mt LCTRL F3      &u_mt LSHFT F4                                           &u_mt LSHFT F9       &u_mt LCTRL F10      &u_mt LALT F11      &u_mt LGUI F12
                                             &tog FUN      &tog FUN	        &tog FUN         &tog FUN
		>;
		};
    };
};